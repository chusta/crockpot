---
  - name: create files
    file:
      state: touch
      dest: "{{item}}"
    with_items:
    - .Xauthority
    - .hushlogin
    become: "{{ansible_user}}"

  - name: create directories
    file:
      state: directory
      recurse: true
      path: "{{home}}/.ssh"
    become: "{{ansible_user}}"

  - name: check for local ssh keys
    stat:
      path: "{{home}}/.ssh/id_ed25519"
    register: ssh_key

  - name: create local ssh keys
    command: >
      ssh-keygen -f "{{home}}/.ssh/id_ed25519"
      -t ed25519 -C "{{ansible_user}}" -N "" -q
    args:
      creates: "{{home}}/.ssh/id_ed25519"
    become: "{{ansible_user}}"
    when: not ssh_key.stat.exists

  - name: create local authorized_keys
    shell: chdir="{{home}}/.ssh" cat id_ed25519.pub >> authorized_keys
    become: "{{ansible_user}}"
    when: not ssh_key.stat.exists

  - name: prompt
    lineinfile:
      dest: "{{home}}/.profile"
      line: "PS1='\\h:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '"
    become: "{{ansible_user}}"

  - name: docker apt-key
    apt_key:
      keyserver: hkp://ha.pool.sks-keyservers.net:80
      id: 58118E89F3A912897C070ADBF76221572C52609D
      state: present

  - name: docker apt-repo
    apt_repository:
      repo: "deb https://apt.dockerproject.org/repo ubuntu-xenial main"
      state: present

  - name: update system
    apt:
      update_cache: yes
      cache_valid_time: 86400
      upgrade: full

  - name: remove packages
    apt:
      name: "{{item}}"
      state: absent
    with_items:
    - augeas-lenses
    - bundler
    - chef
    - chef-zero
    - erubis
    - facter
    - puppet-common
    - ruby
    - ruby1.9.1-dev

  - name: system packages
    apt:
      name: "{{item}}"
      state: latest
    with_items:
    - ca-certificates
    - docker-engine
    - git
    - iftop
    - libssl-dev
    - lsof
    - p0f
    - python-dev
    - python-pip
    - python-virtualenv
    - tmux
    - tree
    - vim
    - xsel

  - name: python packages
    pip:
      name: "{{item}}"
      state: latest
    with_items:
    - pip
    - docker-compose

  - name: create group
    group:
      name: crockpot
      state: present
      gid: 9999

  - name: create user
    user:
      name: crockpot
      group: crockpot
      shell: /bin/false
      home: /crockpot
      uid: 9999
      state: present

  - name: honeypot directories
    file:
      path: "{{item}}"
      state: directory
    with_items:
    - "/honeypot"

  - name: download geolite2 db
    get_url:
      url: http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
      dest: /crockpot
      owner: crockpot
    register: geodb

  - name: gunzip geolite2
    command: gunzip -f /crockpot/GeoLite2-City.mmdb.gz
    when: geodb.changed

  - name: docker-compose template (base)
    local_action:
      module: template
      src: compose-base.j2
      dest: "{{playbook_dir}}/resources/base.j2"

  - name: build honeypot list
    set_fact:
      honeypots: [ "base" ]
